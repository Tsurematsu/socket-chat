---

---

<button id="startButton">Start</button>
<video id="cam-user" autoplay></video>
<video id="cam-participant" autoplay></video>

<script>
    import adapter from 'webrtc-adapter'
    let cam_user: any
    let startButton

    requestIdleCallback(() => {
        const ws = new WebSocket('ws://localhost:8181')
        const pc = new RTCPeerConnection({
            iceServers: [
                { urls: 'stun:stun.l.google.com:19302' },
                { urls: 'stun:stun.voipstunt.com' },
                { urls: 'stun:stun.ideasip.com' },
                {
                    urls: ['turn:13.250.13.83:3478?transport=udp'],
                    username: 'YzYNCouZM1mhqhmseWk6',
                    credential: 'YzYNCouZM1mhqhmseWk6',
                },
            ],
        })
        const browserDetails =
            adapter.browserDetails.browser +
            ' ' +
            adapter.browserDetails.version

        cam_user = document.getElementById('cam-user')
        startButton = document.getElementById('startButton')

        if (startButton === null) {
            console.error('video element not found')
        }
        startButton?.addEventListener('click', start)

        function start() {
            const constraints = {
                video: true,
                audio: true,
            }

            navigator.mediaDevices
                .getUserMedia(constraints)
                .then((stream) => {
                    stream
                        .getTracks()
                        .forEach((track) => pc.addTrack(track, stream))
                })
                .catch((error) => {
                    console.error('problems of conexion to pc', error)
                })

            pc.onicecandidate = ({ candidate }) => {
                if (candidate) {
                    ws.send(
                        JSON.stringify({
                            type: 'candidate',
                            candidate: candidate,
                        })
                    )
                }
            }

            pc.ontrack = ({ streams: [stream] }) => {
                cam_user.srcObject = stream
            }

            pc.createOffer()
                .then((offer) => {
                    return pc.setLocalDescription(offer)
                })
                .then(() => {
                    ws.send(
                        JSON.stringify({
                            type: 'offer',
                            data: pc.localDescription,
                        })
                    )
                })
                .catch((error) => {
                    console.error('Error creating offer:', error)
                })
        }

        ws.onmessage = (message) => {
            let data = JSON.parse(String(message.data))
            console.log(typeof message.data)
            console.log(message.data)

            if (data.type === 'candidate') {
                let candidate = new RTCIceCandidate(data.candidate)
                pc.addIceCandidate(candidate).catch((error) => {
                    console.error('Error adding candidate:', error)
                })
            }

            if (data.type === 'offer') {
                pc.setRemoteDescription(data.data)
                pc.createAnswer().then((answer) => {
                    ws.send(
                        JSON.stringify({
                            type: 'answer',
                            data: answer,
                        })
                    )
                })
            }

            if (data.type === 'answer') {
                console.log('Answer:', data.data)
            }
        }

        console.log('Browser:', browserDetails)
    })
</script>
